package nz.ac.auckland.se306.group12.optimal;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import nz.ac.auckland.se306.group12.ScheduleValidator;
import nz.ac.auckland.se306.group12.TestUtil;
import nz.ac.auckland.se306.group12.models.Graph;
import nz.ac.auckland.se306.group12.models.Schedule;
import nz.ac.auckland.se306.group12.scheduler.Scheduler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * This class has been automatically generated by the GenerateUnitTests.py script. Do not modify
 * this file directly as it will be overwritten the next time the script is run.
 * <p>
 * The optimal schedules for each test have been sourced from
 * <a href="https://parallel.auckland.ac.nz/OptimalTaskScheduling/OptimalSchedules.html">the amazing
 * work</a>
 * done by the Parallel and Reconfigurable Computing Lab at the University of Auckland.
 */
@Timeout(value = 2, unit = TimeUnit.MINUTES, threadMode = ThreadMode.SEPARATE_THREAD)
public class OptimalSchedulerNodes10Test {

  public static final int TOTAL_TESTS = 1296;

  // Change this to adjust how many tests are run
  public static final int TEST_RUN_COUNT = 1296;

  private static Set<Number> tests_to_run;

  /**
   * Randomly select {@link #TEST_RUN_COUNT} tests to run.
   */
  @BeforeAll
  public static void beforeAll() {
    int num_to_run = Math.min(TEST_RUN_COUNT, TOTAL_TESTS);
    tests_to_run = new HashSet<>();
    while (tests_to_run.size() < num_to_run) {
      tests_to_run.add((int) (Math.random() * TOTAL_TESTS));
    }
  }

  public boolean isTestActive(int testIndex) {
    return tests_to_run.contains(testIndex);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(0));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 548;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 380;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(2));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 322;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(3));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 600;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(4));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 411;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(5));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 365;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(6));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 578;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(7));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 432;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(8));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 393;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(9));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 554;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(10));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 328;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(11));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 298;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(12));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 564;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(13));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 393;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(14));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 363;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(15));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 570;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(16));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 365;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(17));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 323;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(18));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 522;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(19));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 386;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(20));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 348;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(21));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 574;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(22));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 385;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(23));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 346;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(24));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 605;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(25));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 412;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(26));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 353;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(27));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 262;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(28));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 499;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(29));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 342;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(30));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 262;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(31));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 465;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(32));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 288;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(33));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 211;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(34));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 70;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(35));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(36));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(37));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(38));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(39));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 48;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(40));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(41));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(42));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(43));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 48;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(44));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(45));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(46));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(47));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(48));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 41;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(49));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 74;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(50));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(51));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random6_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(52));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 67;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random6_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(53));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random6_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(54));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(55));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(56));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(57));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 41;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(58));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(59));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(60));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(61));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(62));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(63));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(64));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(65));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 67;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(66));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(67));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(68));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(69));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 38;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(70));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_1dot84_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(71));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_1.84_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(72));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(73));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(74));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(75));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 69;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(76));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 69;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(77));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 69;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(78));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 69;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(79));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(80));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(81));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(82));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 60;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(83));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 60;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(84));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 60;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(85));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 73;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(86));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 73;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(87));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 73;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot05_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(88));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 81;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot05_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(89));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 81;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_10dot05_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(90));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 81;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot92_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(91));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.92_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 60;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot92_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(92));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.92_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 60;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot92_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(93));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.92_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 60;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot95_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(94));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.95_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot95_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(95));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.95_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot95_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(96));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.95_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(97));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(98));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(99));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(100));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 84;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(101));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 84;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(102));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 84;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(103));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(104));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Join_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(105));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Join_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(106));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 208;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(107));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 117;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(108));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 91;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(109));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 307;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(110));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 169;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(111));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 132;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(112));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 278;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(113));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 172;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(114));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 144;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(115));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 157;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(116));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 91;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(117));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 76;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(118));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 317;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(119));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 200;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(120));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 164;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(121));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 273;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(122));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 153;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(123));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 119;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(124));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 302;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(125));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 174;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(126));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 140;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(127));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 318;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(128));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 214;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(129));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 176;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(130));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 282;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(131));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 164;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(132));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 132;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(133));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 9;
    int expectedScheduleEndTime = 167;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(134));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 300;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(135));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 204;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(136));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 167;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(137));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 357;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(138));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 238;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(139));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 163;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(140));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 28;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(141));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 21;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(142));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 21;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(143));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(144));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 20;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(145));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 18;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(146));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 20;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(147));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(148));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 25;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(149));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 20;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(150));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 40;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(151));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 27;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(152));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 27;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(153));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(154));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(155));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(156));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(157));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(158));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(159));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 38;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(160));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 24;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(161));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(162));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(163));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 19;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(164));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 19;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(165));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 40;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(166));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 27;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(167));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(168));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 41;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(169));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 28;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(170));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 27;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(171));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(172));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 19;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(173));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(174));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(175));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(176));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(177));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(178));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(179));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(180));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(181));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(182));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(183));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(184));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(185));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(186));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(187));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(188));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(189));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(190));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(191));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(192));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(193));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(194));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(195));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(196));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(197));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(198));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(199));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(200));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(201));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(202));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(203));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(204));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_9dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(205));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(206));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(207));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(208));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(209));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(210));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalFork_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(211));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Fork_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(212));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(213));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 15;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(214));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 10;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(215));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(216));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(217));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 11;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(218));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(219));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(220));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 12;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(221));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(222));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 16;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(223));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 12;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(224));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(225));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 15;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(226));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 11;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(227));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 24;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(228));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 12;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(229));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 9;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(230));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 28;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(231));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 14;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(232));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 11;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(233));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 25;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(234));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 13;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(235));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 9;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(236));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(237));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 15;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(238));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 10;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_16(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(239));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 10;
    int expectedScheduleEndTime = 10;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(240));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(241));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 16;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(242));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 10;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(243));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(244));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 13;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalIndependent_Nodes_10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(245));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Independent_Nodes_10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 9;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(246));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 317;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(247));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 212;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(248));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 212;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(249));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 286;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(250));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 216;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(251));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 216;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(252));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 278;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(253));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 171;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(254));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 171;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(255));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 273;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(256));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 207;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(257));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 207;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(258));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 283;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(259));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 227;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(260));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 227;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(261));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 235;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(262));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 170;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(263));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 145;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(264));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 349;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(265));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 236;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(266));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 210;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(267));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 282;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(268));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 181;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(269));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 161;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(270));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 304;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(271));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 196;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(272));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 196;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(273));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 144;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(274));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 222;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(275));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 144;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(276));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 144;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(277));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 372;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(278));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 319;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(279));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 319;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(280));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(281));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(282));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 27;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(283));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(284));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 25;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(285));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 25;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(286));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(287));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(288));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(289));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(290));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(291));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(292));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 38;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(293));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(294));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 28;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(295));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(296));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(297));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(298));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 41;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(299));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(300));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(301));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(302));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(303));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(304));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(305));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 28;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(306));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 28;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(307));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(308));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(309));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(310));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 21;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(311));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 27;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(312));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 21;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(313));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 21;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(314));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(315));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(316));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(317));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(318));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(319));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(320));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 48;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(321));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 48;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(322));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 48;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(323));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(324));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(325));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(326));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(327));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(328));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(329));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(330));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(331));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(332));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(333));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(334));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(335));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(336));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(337));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(338));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(339));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(340));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(341));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(342));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(343));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(344));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(345));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 36;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(346));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(347));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 36;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(348));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 36;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(349));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(350));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(351));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Balanced-MaxBf-3_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(352));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 278;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(353));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 344;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(354));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 278;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(355));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 278;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(356));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 38;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(357));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 40;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(358));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 38;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(359));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 38;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(360));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(361));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(362));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(363));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(364));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(365));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(366));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalInTree_Unbalanced_MaxBf_3_Nodes_10_CCR_2dot02_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(367));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/InTree-Unbalanced-MaxBf-3_Nodes_10_CCR_2.02_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(368));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 255;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(369));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 159;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(370));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 134;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(371));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 286;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(372));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 182;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(373));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 148;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(374));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 300;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(375));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 190;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(376));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 167;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(377));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 245;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(378));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 151;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(379));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 120;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(380));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 369;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(381));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 244;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(382));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 218;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(383));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 216;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(384));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 120;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(385));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 96;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(386));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 301;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(387));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 182;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(388));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 163;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(389));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 321;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(390));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 212;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(391));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 174;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(392));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 382;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(393));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 233;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(394));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 204;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(395));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 9;
    int expectedScheduleEndTime = 130;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(396));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 292;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(397));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 178;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(398));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 130;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(399));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 283;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(400));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 184;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(401));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 149;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(402));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(403));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 23;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(404));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 23;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot96_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(405));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.96_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 41;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot96_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(406));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.96_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot96_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(407));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.96_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(408));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 38;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(409));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 25;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(410));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 24;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(411));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(412));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(413));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(414));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(415));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(416));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(417));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(418));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(419));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 24;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(420));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 24;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(421));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(422));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 18;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(423));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 16;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(424));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(425));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(426));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot05_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(427));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.05_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot05_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(428));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.05_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 19;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot05_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(429));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.05_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(430));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(431));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(432));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 21;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot07_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(433));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.07_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot07_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(434));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.07_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 20;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_1dot07_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(435));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_1.07_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 18;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(436));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(437));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(438));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(439));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(440));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(441));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(442));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(443));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 42;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(444));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 42;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(445));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(446));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random4_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(447));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(448));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(449));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(450));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(451));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(452));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(453));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(454));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(455));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(456));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random2_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(457));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random2_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(458));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random2_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(459));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(460));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(461));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(462));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(463));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(464));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(465));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_10dot07_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(466));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_10.07_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(467));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 24;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(468));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(469));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 27;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(470));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 8;
    int expectedScheduleEndTime = 24;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(471));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(472));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalJoin_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(473));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Join_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(474));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 299;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(475));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 215;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(476));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 215;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(477));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 239;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(478));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 156;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(479));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 156;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(480));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 242;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(481));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 161;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(482));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 161;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(483));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 284;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(484));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 189;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(485));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 176;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(486));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 355;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(487));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 226;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(488));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 204;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(489));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 304;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(490));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 209;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(491));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 193;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(492));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 376;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(493));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 276;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(494));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 276;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(495));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 265;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(496));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 178;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(497));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 170;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(498));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 411;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(499));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 327;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(500));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 327;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(501));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 206;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(502));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 253;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(503));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 206;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(504));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 206;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(505));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 354;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(506));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 244;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(507));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 242;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(508));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 33;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(509));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot91_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(510));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.91_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(511));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(512));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(513));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot93_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(514));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.93_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(515));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 38;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(516));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(517));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(518));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(519));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(520));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(521));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(522));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(523));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(524));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(525));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(526));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(527));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(528));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 25;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(529));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 25;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(530));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 36;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(531));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(532));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 30;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(533));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(534));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 21;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(535));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 21;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(536));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(537));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 28;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(538));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 27;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(539));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(540));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 24;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(541));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 24;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(542));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(543));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(544));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(545));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(546));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(547));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(548));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(549));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(550));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(551));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(552));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(553));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(554));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(555));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(556));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(557));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(558));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(559));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(560));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(561));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(562));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 68;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(563));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 68;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(564));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 68;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(565));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(566));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(567));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(568));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(569));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(570));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(571));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(572));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(573));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(574));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(575));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(576));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(577));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(578));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Balanced_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(579));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Balanced-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(580));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 280;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(581));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 349;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(582));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 280;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(583));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 280;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(584));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(585));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 38;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(586));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot09_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(587));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.09_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(588));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(589));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 29;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(590));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_1dot96_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(591));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_1.96_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(592));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(593));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(594));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalOutTree_Unbalanced_MaxBf_3_Nodes_10_CCR_10dot01_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(595));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/OutTree-Unbalanced-MaxBf-3_Nodes_10_CCR_10.01_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(596));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 518;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(597));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 518;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(598));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 518;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(599));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 455;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(600));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 455;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(601));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 455;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(602));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 660;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(603));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 660;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(604));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 660;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(605));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 553;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(606));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 553;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(607));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 553;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(608));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 639;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(609));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 639;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(610));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 639;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(611));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 560;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(612));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 560;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(613));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 560;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(614));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 443;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(615));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 443;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(616));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 443;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(617));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 554;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(618));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 554;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(619));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 554;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(620));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 409;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(621));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 409;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(622));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 409;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(623));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 481;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(624));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 481;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(625));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 481;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(626));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 481;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(627));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 604;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(628));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 604;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(629));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 604;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(630));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(631));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(632));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(633));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(634));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(635));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(636));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 70;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(637));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 70;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(638));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 70;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(639));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(640));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(641));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(642));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(643));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(644));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(645));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(646));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(647));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(648));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(649));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(650));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(651));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(652));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(653));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(654));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(655));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(656));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(657));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(658));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(659));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(660));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(661));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(662));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot09_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(663));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.09_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(664));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(665));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(666));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(667));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(668));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(669));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(670));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(671));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(672));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(673));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(674));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(675));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(676));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(677));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(678));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(679));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(680));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(681));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(682));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(683));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(684));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(685));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(686));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(687));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 68;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(688));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 68;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(689));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 68;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(690));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(691));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(692));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(693));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 76;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(694));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 76;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(695));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 76;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(696));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(697));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(698));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(699));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 78;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(700));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 78;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalPipeline_Nodes_10_CCR_9dot99_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(701));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Pipeline_Nodes_10_CCR_9.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 78;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(702));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 7;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(703));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 26;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(704));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot20_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(705));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.20_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 7;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(706));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(707));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 31;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(708));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(709));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 17;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(710));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 18;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(711));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(712));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 18;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot40_CCR_10dot02_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(713));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.40_CCR_10.02_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 18;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(714));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 88;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(715));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 181;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(716));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 98;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(717));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.50_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 88;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(718));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 18;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(719));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 22;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(720));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 18;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot60_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(721));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 18;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(722));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(723));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(724));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_0dot60_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(725));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_0.60_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(726));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 341;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(727));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 386;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(728));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 341;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(729));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 341;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(730));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 449;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(731));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 427;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(732));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 427;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(733));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(734));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(735));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_1dot85_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(736));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_1.85_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 32;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_10dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(737));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_10dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(738));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot40_CCR_10dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(739));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.40_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(740));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 476;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(741));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 450;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(742));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 450;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(743));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(744));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(745));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(746));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(747));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(748));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(749));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(750));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(751));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(752));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot50_CCR_2dot03_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(753));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.50_CCR_2.03_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 34;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(754));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 699;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(755));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 699;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(756));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 699;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(757));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 558;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(758));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 558;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot60_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(759));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 558;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot60_CCR_9dot97_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(760));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot60_CCR_9dot97_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(761));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot60_CCR_9dot97_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(762));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.60_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(763));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 601;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(764));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 547;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(765));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 547;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(766));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 507;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(767));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 492;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot70_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(768));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.70_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 492;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(769));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(770));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(771));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(772));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(773));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot80_CCR_10dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(774));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.80_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot90_CCR_0dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(775));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 86;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot90_CCR_0dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(776));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 86;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot90_CCR_0dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(777));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 86;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot90_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(778));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot90_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(779));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_1dot90_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(780));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_1.90_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(781));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 79;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(782));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 79;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(783));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 79;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot00_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(784));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 79;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot00_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(785));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot00_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(786));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot00_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(787));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.00_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(788));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(789));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(790));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(791));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 90;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(792));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 90;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(793));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 90;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(794));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 111;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(795));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 111;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(796));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 111;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(797));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(798));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot10_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(799));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(800));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 1144;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(801));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 1144;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(802));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 1144;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(803));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(804));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(805));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot04_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(806));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot04_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(807));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_10dot04_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(808));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_9dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(809));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_9dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(810));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot20_CCR_9dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(811));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.20_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(812));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 895;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(813));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 895;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(814));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 895;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(815));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 895;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(816));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 896;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(817));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 896;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(818));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 896;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_1dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(819));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 101;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_1dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(820));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 101;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot30_CCR_1dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(821));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.30_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 101;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(822));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 885;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(823));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 885;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(824));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 885;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(825));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 1048;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(826));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 1048;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(827));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 1048;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(828));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 123;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(829));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 123;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(830));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 123;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(831));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 110;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(832));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 110;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot40_CCR_1dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(833));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.40_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 110;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot50_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(834));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.50_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 117;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot50_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(835));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.50_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 117;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot50_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(836));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.50_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 117;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot60_CCR_0dot99_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(837));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.60_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 102;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot60_CCR_0dot99_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(838));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.60_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 102;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_2dot60_CCR_0dot99_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(839));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_2.60_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 102;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(840));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2792;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(841));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2792;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(842));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2792;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(843));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2598;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(844));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2598;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(845));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2598;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(846));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2819;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(847));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2819;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(848));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2819;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(849));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2902;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(850));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2902;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(851));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2902;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(852));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2758;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(853));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2758;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(854));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2758;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random6_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(855));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2789;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random6_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(856));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2789;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random6_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(857));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2789;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random7_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(858));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2822;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random7_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(859));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2822;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random7_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(860));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2822;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random8_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(861));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2841;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random8_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(862));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2841;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random8_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(863));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2841;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random9_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(864));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2769;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random9_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(865));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2769;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random9_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(866));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2769;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(867));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2680;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(868));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2680;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(869));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2680;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(870));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2680;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(871));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2961;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(872));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2961;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(873));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 2961;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(874));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 261;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(875));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 261;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(876));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 261;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(877));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 274;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(878));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 274;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(879));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 274;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(880));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 274;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(881));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 276;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(882));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 276;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_0dot99_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(883));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 276;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(884));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 261;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(885));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 261;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(886));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 261;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(887));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 273;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(888));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 273;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(889));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 273;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(890));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 276;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(891));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 276;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(892));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 276;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(893));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 288;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(894));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 288;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(895));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 288;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(896));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 288;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(897));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 288;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(898));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 288;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(899));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 253;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(900));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 253;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(901));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 253;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(902));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 291;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(903));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 291;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(904));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 291;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(905));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 258;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(906));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 258;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_1dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(907));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 258;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(908));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(909));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(910));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(911));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(912));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(913));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(914));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(915));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(916));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(917));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(918));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(919));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(920));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(921));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(922));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot05_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(923));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.05_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(924));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(925));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(926));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(927));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(928));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot12_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(929));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.12_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot13_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(930));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.13_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot13_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(931));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.13_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_10dot13_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(932));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_10.13_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(933));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 126;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(934));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 126;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(935));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 126;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_2dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(936));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_2.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 126;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot92_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(937));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.92_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot92_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(938));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.92_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot92_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(939));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.92_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot96_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(940));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.96_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot96_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(941));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.96_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot96_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(942));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.96_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot97_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(943));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.97_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 67;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot97_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(944));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.97_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 67;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalRandom_Nodes_10_Density_4dot50_CCR_9dot97_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(945));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Random_Nodes_10_Density_4.50_CCR_9.97_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 67;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(946));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 494;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(947));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 494;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(948));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 494;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(949));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 494;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(950));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 48;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(951));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(952));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 48;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot02_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(953));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.02_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 48;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(954));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(955));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(956));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(957));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(958));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 76;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(959));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 76;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(960));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 76;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_2_Nodes_10_CCR_10dot03_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(961));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-2_Nodes_10_CCR_10.03_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 76;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(962));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 515;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(963));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 475;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(964));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 475;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(965));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 457;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(966));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 404;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(967));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 404;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(968));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 366;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(969));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 330;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(970));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 330;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(971));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 400;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(972));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 383;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(973));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 383;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(974));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 554;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(975));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 477;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(976));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 477;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(977));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 586;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(978));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 586;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(979));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 586;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(980));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 458;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(981));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 428;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(982));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 428;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(983));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 622;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(984));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 612;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(985));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 612;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(986));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 425;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(987));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 329;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(988));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 329;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(989));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 358;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(990));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 448;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(991));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 358;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(992));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 358;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(993));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 484;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(994));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 422;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(995));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 422;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(996));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(997));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 42;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot94_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(998));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.94_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 42;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(999));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1000));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1001));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1002));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1003));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1004));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1005));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1006));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1007));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1008));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1009));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1010));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1011));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1012));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1013));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1014));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1015));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1016));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1017));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1018));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1019));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1020));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1021));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1022));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1023));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 39;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1024));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1025));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot04_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1026));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.04_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1027));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1028));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot06_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1029));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.06_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1030));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1031));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1032));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_1dot98_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1033));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_1.98_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1034));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1035));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1036));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1037));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1038));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1039));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1040));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 68;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1041));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 68;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1042));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 68;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1043));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1044));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1045));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1046));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1047));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1048));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1049));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1050));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1051));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1052));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1053));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1054));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1055));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1056));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1057));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_10dot04_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1058));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_10.04_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 53;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1059));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1060));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1061));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1062));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1063));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1064));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 58;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1065));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1066));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_3_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1067));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-3_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1068));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 476;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1069));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 515;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1070));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 476;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1071));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 476;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1072));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1073));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1074));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_0dot97_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1075));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_0.97_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 51;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1076));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1077));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1078));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_10dot04_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1079));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_10.04_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1080));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1081));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1082));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_4_Nodes_10_CCR_2dot05_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1083));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-4_Nodes_10_CCR_2.05_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1084));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 414;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1085));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 296;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1086));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 286;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1087));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 580;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1088));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 541;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1089));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 541;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1090));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 493;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1091));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 427;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1092));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 427;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1093));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 534;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1094));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 381;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1095));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 381;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1096));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 465;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1097));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 430;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1098));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 430;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1099));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 463;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1100));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 410;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1101));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 410;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1102));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 471;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1103));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 438;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1104));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 438;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1105));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 406;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1106));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 380;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1107));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 380;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1108));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 410;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1109));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 361;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1110));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 361;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1111));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 467;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1112));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 579;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1113));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 467;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1114));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 467;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1115));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 355;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1116));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 324;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1117));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 324;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1118));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1119));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1120));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1121));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 41;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1122));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1123));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 35;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1124));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1125));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1126));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1127));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 72;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1128));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1129));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1130));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1131));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1132));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1133));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1134));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 45;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1135));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1136));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 37;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1137));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1138));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 41;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1139));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 41;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1140));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1141));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1142));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 43;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1143));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1144));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1145));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 44;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1146));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1147));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1148));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 62;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1149));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1150));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot03_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1151));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.03_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 49;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1152));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1153));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1154));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_1dot99_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1155));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_1.99_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1156));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1157));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1158));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1159));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1160));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1161));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1162));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1163));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1164));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1165));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 70;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1166));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 70;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1167));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 70;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1168));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1169));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1170));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 64;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1171));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1172));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1173));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1174));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1175));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1176));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot97_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1177));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.97_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 59;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1178));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1179));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1180));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1181));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1182));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1183));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 54;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1184));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1185));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1186));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 56;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1187));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1188));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalSeriesParallel_MaxBf_5_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1189));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/SeriesParallel-MaxBf-5_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1190));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 583;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1191));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 583;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1192));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 583;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1193));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 700;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1194));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 700;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1195));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 700;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1196));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 521;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1197));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 521;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random3_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1198));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#3_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 521;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1199));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 612;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1200));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 612;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random4_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1201));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#4_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 612;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1202));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 474;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1203));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 474;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random5_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1204));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#5_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 474;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1205));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 644;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1206));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 644;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random6_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1207));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#6_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 644;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1208));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 683;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1209));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 683;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random7_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1210));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#7_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 683;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1211));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 573;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1212));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 573;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random8_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1213));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#8_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 573;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1214));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 591;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1215));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 591;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random9_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1216));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random#9_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 591;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1217));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 450;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1218));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 450;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1219));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 450;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1220));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 450;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1221));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 625;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1222));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 625;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot10_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1223));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.10_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 625;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1224));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1225));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot97_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1226));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.97_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1227));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1228));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1229));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1230));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 83;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1231));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 83;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1232));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 6;
    int expectedScheduleEndTime = 83;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1233));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1234));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_0dot99_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1235));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_0.99_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1236));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 72;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1237));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 72;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1238));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 72;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1239));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1240));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1241));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 63;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1242));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1243));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot00_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1244));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 71;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1245));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1246));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1247));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 66;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1248));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 88;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1249));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-4.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 88;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random2_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1250));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random#2_Homogeneous-6.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 88;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1251));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 77;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1252));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 77;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1253));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 77;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1254));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 77;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1255));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 78;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1256));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 4;
    int expectedScheduleEndTime = 78;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot01_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1257));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 5;
    int expectedScheduleEndTime = 78;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1258));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1259));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 2;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1260));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_1dot97_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1261));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_1.97_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 3;
    int expectedScheduleEndTime = 57;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1262));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1263));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random1_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1264));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random#1_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 47;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1265));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1266));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot00_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1267));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.00_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1268));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 67;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1269));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 67;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot01_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1270));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.01_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 67;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1271));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1272));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot02_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1273));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.02_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1274));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1275));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot03_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1276));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.03_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 65;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot08_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1277));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.08_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot08_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1278));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.08_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot08_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1279));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.08_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 50;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot11_WeightType_Random_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1280));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.11_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot11_WeightType_Random_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1281));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.11_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_10dot11_WeightType_Random_Homogeneous_6(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1282));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_10.11_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 55;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot93_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1283));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.93_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot93_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1284));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.93_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot93_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1285));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.93_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 61;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1286));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1287));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot94_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1288));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.94_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_16(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1289));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-16.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_2(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1290));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_4(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1291));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_GB_Homogeneous_8(
      Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1292));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_GB_Homogeneous-8.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 46;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_2(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1293));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-2.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_4(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1294));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-4.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

  @ParameterizedTest
  @MethodSource("nz.ac.auckland.se306.group12.TestUtil#getOptimalSchedulers")
  void testOptimalStencil_Nodes_10_CCR_9dot98_WeightType_Random_Homogeneous_6(Scheduler scheduler) {
    Assumptions.assumeTrue(this.isTestActive(1295));

    Graph graph = TestUtil.loadGraph(
        "./graphs/optimal/10-nodes/Stencil_Nodes_10_CCR_9.98_WeightType_Random_Homogeneous-6.dot");
    int processorCount = 1;
    int expectedScheduleEndTime = 52;

    Schedule actualSchedule = scheduler.schedule(graph, processorCount);

    Assertions.assertEquals(expectedScheduleEndTime, actualSchedule.getLatestEndTime());
    ScheduleValidator.assertValidSchedule(actualSchedule, graph);
  }

}
